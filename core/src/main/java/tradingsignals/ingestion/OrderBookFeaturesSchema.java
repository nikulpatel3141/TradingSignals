/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tradingsignals.ingestion;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderBookFeaturesSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2493741113590468796L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderBookFeaturesSchema\",\"namespace\":\"tradingsignals.ingestion\",\"fields\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"bidAskSpread\",\"type\":[\"double\",\"null\"]},{\"name\":\"orderImbalance\",\"type\":[\"double\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<OrderBookFeaturesSchema> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderBookFeaturesSchema> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderBookFeaturesSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderBookFeaturesSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderBookFeaturesSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderBookFeaturesSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderBookFeaturesSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderBookFeaturesSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderBookFeaturesSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence symbol;
  private java.time.Instant updateTime;
  private java.lang.Double bidAskSpread;
  private java.lang.Double orderImbalance;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderBookFeaturesSchema() {}

  /**
   * All-args constructor.
   * @param symbol The new value for symbol
   * @param updateTime The new value for updateTime
   * @param bidAskSpread The new value for bidAskSpread
   * @param orderImbalance The new value for orderImbalance
   */
  public OrderBookFeaturesSchema(java.lang.CharSequence symbol, java.time.Instant updateTime, java.lang.Double bidAskSpread, java.lang.Double orderImbalance) {
    this.symbol = symbol;
    this.updateTime = updateTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.bidAskSpread = bidAskSpread;
    this.orderImbalance = orderImbalance;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbol;
    case 1: return updateTime;
    case 2: return bidAskSpread;
    case 3: return orderImbalance;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbol = (java.lang.CharSequence)value$; break;
    case 1: updateTime = (java.time.Instant)value$; break;
    case 2: bidAskSpread = (java.lang.Double)value$; break;
    case 3: orderImbalance = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'updateTime' field.
   * @return The value of the 'updateTime' field.
   */
  public java.time.Instant getUpdateTime() {
    return updateTime;
  }


  /**
   * Sets the value of the 'updateTime' field.
   * @param value the value to set.
   */
  public void setUpdateTime(java.time.Instant value) {
    this.updateTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'bidAskSpread' field.
   * @return The value of the 'bidAskSpread' field.
   */
  public java.lang.Double getBidAskSpread() {
    return bidAskSpread;
  }


  /**
   * Sets the value of the 'bidAskSpread' field.
   * @param value the value to set.
   */
  public void setBidAskSpread(java.lang.Double value) {
    this.bidAskSpread = value;
  }

  /**
   * Gets the value of the 'orderImbalance' field.
   * @return The value of the 'orderImbalance' field.
   */
  public java.lang.Double getOrderImbalance() {
    return orderImbalance;
  }


  /**
   * Sets the value of the 'orderImbalance' field.
   * @param value the value to set.
   */
  public void setOrderImbalance(java.lang.Double value) {
    this.orderImbalance = value;
  }

  /**
   * Creates a new OrderBookFeaturesSchema RecordBuilder.
   * @return A new OrderBookFeaturesSchema RecordBuilder
   */
  public static tradingsignals.ingestion.OrderBookFeaturesSchema.Builder newBuilder() {
    return new tradingsignals.ingestion.OrderBookFeaturesSchema.Builder();
  }

  /**
   * Creates a new OrderBookFeaturesSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderBookFeaturesSchema RecordBuilder
   */
  public static tradingsignals.ingestion.OrderBookFeaturesSchema.Builder newBuilder(tradingsignals.ingestion.OrderBookFeaturesSchema.Builder other) {
    if (other == null) {
      return new tradingsignals.ingestion.OrderBookFeaturesSchema.Builder();
    } else {
      return new tradingsignals.ingestion.OrderBookFeaturesSchema.Builder(other);
    }
  }

  /**
   * Creates a new OrderBookFeaturesSchema RecordBuilder by copying an existing OrderBookFeaturesSchema instance.
   * @param other The existing instance to copy.
   * @return A new OrderBookFeaturesSchema RecordBuilder
   */
  public static tradingsignals.ingestion.OrderBookFeaturesSchema.Builder newBuilder(tradingsignals.ingestion.OrderBookFeaturesSchema other) {
    if (other == null) {
      return new tradingsignals.ingestion.OrderBookFeaturesSchema.Builder();
    } else {
      return new tradingsignals.ingestion.OrderBookFeaturesSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderBookFeaturesSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderBookFeaturesSchema>
    implements org.apache.avro.data.RecordBuilder<OrderBookFeaturesSchema> {

    private java.lang.CharSequence symbol;
    private java.time.Instant updateTime;
    private java.lang.Double bidAskSpread;
    private java.lang.Double orderImbalance;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tradingsignals.ingestion.OrderBookFeaturesSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[1].schema(), other.updateTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bidAskSpread)) {
        this.bidAskSpread = data().deepCopy(fields()[2].schema(), other.bidAskSpread);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderImbalance)) {
        this.orderImbalance = data().deepCopy(fields()[3].schema(), other.orderImbalance);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderBookFeaturesSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(tradingsignals.ingestion.OrderBookFeaturesSchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[1].schema(), other.updateTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bidAskSpread)) {
        this.bidAskSpread = data().deepCopy(fields()[2].schema(), other.bidAskSpread);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderImbalance)) {
        this.orderImbalance = data().deepCopy(fields()[3].schema(), other.orderImbalance);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateTime' field.
      * @return The value.
      */
    public java.time.Instant getUpdateTime() {
      return updateTime;
    }


    /**
      * Sets the value of the 'updateTime' field.
      * @param value The value of 'updateTime'.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder setUpdateTime(java.time.Instant value) {
      validate(fields()[1], value);
      this.updateTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'updateTime' field has been set.
      * @return True if the 'updateTime' field has been set, false otherwise.
      */
    public boolean hasUpdateTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'updateTime' field.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder clearUpdateTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidAskSpread' field.
      * @return The value.
      */
    public java.lang.Double getBidAskSpread() {
      return bidAskSpread;
    }


    /**
      * Sets the value of the 'bidAskSpread' field.
      * @param value The value of 'bidAskSpread'.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder setBidAskSpread(java.lang.Double value) {
      validate(fields()[2], value);
      this.bidAskSpread = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bidAskSpread' field has been set.
      * @return True if the 'bidAskSpread' field has been set, false otherwise.
      */
    public boolean hasBidAskSpread() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bidAskSpread' field.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder clearBidAskSpread() {
      bidAskSpread = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderImbalance' field.
      * @return The value.
      */
    public java.lang.Double getOrderImbalance() {
      return orderImbalance;
    }


    /**
      * Sets the value of the 'orderImbalance' field.
      * @param value The value of 'orderImbalance'.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder setOrderImbalance(java.lang.Double value) {
      validate(fields()[3], value);
      this.orderImbalance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderImbalance' field has been set.
      * @return True if the 'orderImbalance' field has been set, false otherwise.
      */
    public boolean hasOrderImbalance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderImbalance' field.
      * @return This builder.
      */
    public tradingsignals.ingestion.OrderBookFeaturesSchema.Builder clearOrderImbalance() {
      orderImbalance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderBookFeaturesSchema build() {
      try {
        OrderBookFeaturesSchema record = new OrderBookFeaturesSchema();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.updateTime = fieldSetFlags()[1] ? this.updateTime : (java.time.Instant) defaultValue(fields()[1]);
        record.bidAskSpread = fieldSetFlags()[2] ? this.bidAskSpread : (java.lang.Double) defaultValue(fields()[2]);
        record.orderImbalance = fieldSetFlags()[3] ? this.orderImbalance : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderBookFeaturesSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderBookFeaturesSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderBookFeaturesSchema>
    READER$ = (org.apache.avro.io.DatumReader<OrderBookFeaturesSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










